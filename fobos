[modes]
modes = foodie-static-opencoarrays-gnu foodie-static-opencoarrays-gnu-debug
        foodie-static-gnu foodie-static-gnu-debug foodie-shared-gnu foodie-shared-gnu-debug
        foodie-static-intel foodie-static-intel-debug foodie-shared-intel foodie-shared-intel-debug
        foodie-static-gnu-coverage
        foodie-static-gnu-pure foodie-static-gnu-debug-pure foodie-static-gnu-coverage-pure
        foodie-static-intel-pure foodie-static-intel-debug-pure

[common-variables]
$CSHARED_GNU = -cpp -c -fPIC -frealloc-lhs
$CSHARED_INT = -cpp -c -fpic -assume realloc_lhs
$LSHARED     = -shared
$CSTATIC_GNU = -cpp -c -frealloc-lhs
$CSTATIC_INT = -cpp -c -assume realloc_lhs
$DEBUG_GNU   = -Og -g3 -Warray-bounds -Wcharacter-truncation -Wline-truncation -Wimplicit-interface -Wimplicit-procedure -Wunderflow -Wuninitialized -fcheck=all -fmodule-private -ffree-line-length-132 -fimplicit-none -fbacktrace -fdump-core -finit-real=nan -std=f2008 -fall-intrinsics
$DEBUG_INT   = -O0 -debug all -check all -warn all -extend-source 132 -traceback -gen-interfaces -fp-stack-check -fstack-protector-all -ftrapuv -no-ftz -std08
$OPTIMIZE    = -O2
$EXDIRS      = FACE/src/tests FACE/src/third_party/
               FLAP/src/tests/ FLAP/src/third_party/
               PENF/src/tests/ PENF/src/third_party/
               pyplot-fortran/src/tests/
               WenOOF/src/tests/ WenOOF/src/third_party/

# main modes
[foodie-static-opencoarrays-gnu]
help     = Build FOODIE library in static release mode with OpenCoarrays-GNU gfortran
compiler = opencoarrays-gnu
cflags   = $CSTATIC_GNU $OPTIMIZE
lflags   = $OPTIMIZE
preproc  = -DCAF
mklib    = static
output   = libfoodie.a
template = template-common

[foodie-static-opencoarrays-gnu-debug]
help     = Build FOODIE library in static release mode with OpenCoarrays-GNU gfortran
compiler = opencoarrays-gnu
cflags   = $CSTATIC_GNU $DEBUG_GNU
lflags   = $DEBUG_GNU
preproc  = -DCAF
mklib    = static
output   = libfoodie.a
template = template-common

[foodie-static-gnu]
help     = Build FOODIE library in static release mode with GNU gfortran
compiler = gnu
cflags   = $CSTATIC_GNU $OPTIMIZE
lflags   = $OPTIMIZE
mklib    = static
output   = libfoodie.a
template = template-common

[foodie-static-gnu-debug]
help     = Build FOODIE library in static debug mode with GNU gfortran
compiler = gnu
cflags   = $CSTATIC_GNU $DEBUG_GNU
lflags   = $DEBUG_GNU
mklib    = static
output   = libfoodie.a
template = template-common

[foodie-shared-gnu]
help     = Build FOODIE library in shared release mode with GNU gfortran
compiler = gnu
cflags   = $CSHARED_GNU $OPTIMIZE
lflags   = $LSHARED
mklib    = shared
output   = libfoodie.so
template = template-common

[foodie-shared-gnu-debug]
help     = Build FOODIE library in shared debug mode with GNU gfortran
compiler = gnu
cflags   = $CSHARED_GNU $DEBUG_GNU
lflags   = $LSHARED $DEBUG_GNU
mklib    = shared
output   = libfoodie.so
template = template-common

[foodie-static-intel]
help     = Build FOODIE library in static release mode with Intel Fortran
compiler = intel
cflags   = $CSTATIC_INT $OPTIMIZE
lflags   = $OPTIMIZE
mklib    = static
output   = libfoodie.a
template = template-common

[foodie-static-intel-debug]
help     = Build FOODIE library in static debug mode with Intel Fortran
compiler = intel
cflags   = $CSTATIC_INT $DEBUG_INT
lflags   = $DEBUG_INT
mklib    = static
output   = libfoodie.a
template = template-common

[foodie-shared-intel]
help     = Build FOODIE library in shared release mode with Intel Fortran
compiler = intel
cflags   = $CSHARED_INT $OPTIMIZE
lflags   = $LSHARED
mklib    = shared
output   = libfoodie.so
template = template-common

[foodie-shared-intel-debug]
help     = Build FOODIE library in shared debug mode with Intel Fortran
compiler = intel
cflags   = $CSHARED_INT $DEBUG_INT
lflags   = $LSHARED $DEBUG_INT
mklib    = shared
output   = libfoodie.so
template = template-common

[foodie-static-gnu-coverage]
help     = Build FOODIE library in static release coverage mode with GNU gfortran
compiler = gnu
cflags   = $CSTATIC_GNU $OPTIMIZE
lflags   = $OPTIMIZE
mklib    = static
output   = libfoodie.a
coverage = True
template = template-common

# pure modes for testing FOODIE ADT with "pure" procedures
[foodie-static-gnu-pure]
help     = Build FOODIE library in static release mode with GNU gfortran
compiler = gnu
cflags   = $CSTATIC_GNU $OPTIMIZE
lflags   = $OPTIMIZE
preproc  = -DPURE
mklib    = static
output   = libfoodie.a
template = template-common

[foodie-static-gnu-debug-pure]
help     = Build FOODIE library in static debug mode with GNU gfortran
compiler = gnu
cflags   = $CSTATIC_GNU $DEBUG_GNU
lflags   = $DEBUG_GNU
preproc  = -DPURE
mklib    = static
output   = libfoodie.a
template = template-common

[foodie-static-gnu-coverage-pure]
help     = Build FOODIE library in static release coverage mode with GNU gfortran
compiler = gnu
cflags   = $CSTATIC_GNU $OPTIMIZE
lflags   = $OPTIMIZE
preproc  = -DPURE
mklib    = static
output   = libfoodie.a
coverage = True
template = template-common

[foodie-static-intel-pure]
help     = Build FOODIE library in static release mode with Intel Fortran
compiler = intel
cflags   = $CSTATIC_INT $OPTIMIZE
lflags   = $OPTIMIZE
preproc  = -DPURE
mklib    = static
output   = libfoodie.a
template = template-common

[foodie-static-intel-debug-pure]
help     = Build FOODIE library in static debug mode with Intel Fortran
compiler = intel
cflags   = $CSTATIC_INT $DEBUG_INT
lflags   = $DEBUG_INT
preproc  = -DPURE
mklib    = static
output   = libfoodie.a
template = template-common

# templates
[template-common]
cflags_heritage = True
build_dir       = ./build/lib/
mod_dir         = mod
obj_dir         = obj
src             = src/
exclude_dirs    = $EXDIRS
target          = foodie.f90
colors          = True
quiet           = False
log             = True
jobs            = 10

# rules
[rule-makedoc]
help   = Build documentation from source files
rule_1 = rm -rf doc/html/*
rule_2 = ford doc/main_page.md --debug
rule_3 = cp -r doc/html/publish/* doc/html/
rule_4 = rm -rf doc/html/publish

[rule-deldoc]
help = Delete documentation
rule = rm -rf doc/html/*

[rule-delexe]
help = Delete exes
rule = rm -rf build/

[rule-clean]
help = Clean the project tree
rule_1 = FoBiS.py rule -ex deldoc
rule_2 = FoBiS.py rule -ex delexe
rule_3 = rm -f *.gcov

[rule-maketar]
help = Make tar archive of the project
rule = tar --xform="s%^%FOODIE/%" -czf FOODIE.tar.gz *

[rule-makecoverage]
help   = Rule for performing coverage analysis
rule_1 = FoBiS.py build -f src/tests/tester/fobos -mode gnu-coverage
rule_2 = ./build/tests/tester/foodie_tester lcce test -ft 2 -Dt 1e-1 1e-2
rule_3 = ./build/tests/tester/foodie_tester linear_advection -is sin_wave --weno-order 3 test -s runge_kutta_ls -ft 1 -Dt 8e-3 2e-3
rule_4 = ./build/tests/tester/foodie_tester oscillation test -ft 1e4 -Dt 1e1 0.5e1
rule_5 = rm -f build/tests/tester/obj/penf* build/tests/tester/obj/face* build/tests/tester/obj/flap* build/tests/tester/obj/penf* build/tests/tester/obj/wenoof*
rule_6 = gcov -o build/tests/tester/obj/ src/lib/foodie*
rule_7 = rm -f *.gcov

[rule-coverage-analysis]
help   = Rule for performing coverage analysis and saving reports in markdown
rule_1 = FoBiS.py build -f src/tests/tester/fobos -mode gnu-coverage
rule_2 = ./build/tests/tester/foodie_tester lcce test -ft 2 -Dt 1e-1 1e-2
rule_3 = ./build/tests/tester/foodie_tester linear_advection -is sin_wave --weno-order 3 test -s runge_kutta_ls -ft 1 -Dt 8e-3 2e-3
rule_4 = ./build/tests/tester/foodie_tester oscillation test -ft 1e4 -Dt 1e1 0.5e1
rule_5 = rm -f build/tests/tester/obj/penf* build/tests/tester/obj/face* build/tests/tester/obj/flap* build/tests/tester/obj/penf* build/tests/tester/obj/wenoof*
rule_6 = gcov -o build/tests/tester/obj/ src/lib/foodie*
rule_7 = FoBiS.py rule -gcov_analyzer wiki/ Coverage-Analysis
rule_8 = rm -f *.gcov
